using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;



namespace SymplexCsharp
{
    class Program
    {
        //-----------------------------------------------------------------------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------------------------------------------------------



        static void Main(string[] args)
        {

            const int MAX = 10;
            const int RESTRICOES = 3;
            double[,] matrizRestricao = new double[MAX+1,MAX + RESTRICOES] ;

            double[] termIndependente = new double[RESTRICOES];

            int p;

            double[] funcao = new double[MAX];


            int rest, ni, var,c;

            int i, j, k = 1, col, lin = 0, count, conta, soma;
            double maximo = 0, menor, aux, mult, temp;

            //Numero maximo de restricoes aceita por este symplex



            Console.WriteLine("Programa para maximizar problema de otimizacao atraves do symplex");
            Console.Write("Funcao a ser otimizada \nNumero de variaveis: ");
            var = int.Parse(Console.ReadLine());


           


            Console.WriteLine("\nExemplo: cn.Xn n de 1 ate numero de variaveis");

            for (c = 0; c < var; c++)
            {
                Console.Write(" c" + (c + 1) + ":");
                funcao[c] = double.Parse(Console.ReadLine());


            }

            Console.Write("\nNumero de restricoes: ");
            rest = int.Parse(Console.ReadLine());



            for (i = 0; i < rest; i++)
            {
                Console.WriteLine("Restricao " + (i+1));
                
                for (c = 0; c < var; c++)
                {
                    
                    Console.Write("X" + k+":");
                    matrizRestricao[i, c] = float.Parse(Console.ReadLine());
                    k++;

                }


                Console.Write("Termo independente da restricao eg: cn.Xn = b\nb= ");
                termIndependente[i] = float.Parse(Console.ReadLine());

            }
            for (i = 0; i <= rest; i++)
            {
                for ( j = 0; j <= rest + var; j++)
                    Console.Write("\t" + matrizRestricao[i, j]);
                Console.WriteLine();
            }

            rest = var;

            //cria tabela inicial do simplex
            for (i = 0; i < rest; i++)
                for (j = 0; j < rest; j++)
                    if (i == j)
                        
                        matrizRestricao[i,j + var] = 1;
                    /*else
                        matrizRestricao[i,j+var] = 0;*/
            for (i = 0; i < rest; i++)
                matrizRestricao[i, var + rest] = termIndependente[i];

            for (j = 0; j < var; j++)
                matrizRestricao[rest, j] = (funcao[j] * -1);
            for (j = var; j < rest + var; j++)
                matrizRestricao[rest, j] = 0;

            ni = 1;
            Console.WriteLine("\n-----------------------------------------------");
            Console.WriteLine("\n ITERACAO " + ni);
            Console.WriteLine("\n-----------------------------------------------\n");
            ni++;

            for (i = 0; i <= rest; i++)
            {
                for ( j = 0; j <= rest + var; j++)
                    Console.Write("\t" + matrizRestricao[i, j]);
                Console.WriteLine();
            }

            Console.WriteLine("\n");
            

            //Encontrar a variavel que entra e a variavel que sai da base

            do
            {
                //Encontra a variavel que entrara na base
                maximo = Math.Abs(matrizRestricao[rest,0]);
                col = 0;
                for (j = 0; j <= rest + var; j++)
                {
                    if (matrizRestricao[rest,j] < 0)
                    {
                        temp = -1 * matrizRestricao[rest,j];
                        if (maximo < temp)//encontra coluna pivo
                        {
                            maximo = temp;
                            col = j;
                        }
                    }
                    else
                        continue;
                }

                count = 0;
                aux = 1e20;
                menor = 1e20;
                for (i = 0; i < rest; i++)
                {

                    if (matrizRestricao[i,col] > 0)
                        aux = matrizRestricao[i,rest + var] / matrizRestricao[i,col];//encontra linha pivo
                    else
                        count++;
                    if (menor > aux)
                    {
                        menor = aux;
                        lin = i;
                    }
                }
                if (count == rest)
                {
                    Console.WriteLine("Solucao ilimitada");
                    
                }
                Console.WriteLine("\nNumero Pivo: "+matrizRestricao[lin,col]+ ", linha "+lin+ " coluna "+col);
                
                

                //encontra os coeficientes da nova tabela
                aux = matrizRestricao[lin, col];//numero pivo
                for (j = 0; j <= (rest + var); j++)
                    matrizRestricao[lin, j] = matrizRestricao[lin, j] / aux;


                for (i = 0; i <= rest; i++)
                {
                    if (i == lin)//verifica se imprimiu a ultima linha
                        continue;
                    else
                    {
                        aux = matrizRestricao[i, col] * -1;
                        for (k = 0; k <= (rest + var); k++)
                        {
                            matrizRestricao[i, k] = (aux * matrizRestricao[lin, k]) + matrizRestricao[i, k];
                        }
                    }

                }

                Console.WriteLine("\n ITERACAO ", ni);

                ni++;
                //imprime proxima matriz (rest = Numero de restrições)
                for (i = 0; i <= rest; i++)
                {
                    for (j = 0; j <= rest + var; j++)
                        Console.Write("\t"+matrizRestricao[i, j]);
                    Console.Write("\n");

                }

                conta = 0;
                for (j = 0; j < rest + var; j++)
                    if (matrizRestricao[rest, j] >= 0)
                        conta++;
                p = j;
                if (conta == rest + var)
                    break;
            } while (conta == 0);

            //imprime o Resultado
           
            
            Console.WriteLine("---->");
            Console.WriteLine("Resultado\n \tZ: " + matrizRestricao[rest,p]);
            Console.WriteLine("\n \tA: " + matrizRestricao[rest-2, p]);
            Console.WriteLine("\n \tB: " + matrizRestricao[rest -1, p]);
            Console.Read();
        }

    }
}

